import * as FileSystem from "expo-file-system";
import { Skill } from "../types";

/**
 * CSVファイルからスキルデータを読み込む関数
 * @returns スキルデータの配列
 */
export const loadSkillsFromCSV = async (): Promise<Skill[]> => {
  try {
    // CSVデータを直接ハードコードする
    // 実際のアプリでは、アセットからの読み込みや、APIからの取得などを行うべきですが、
    // 開発中の問題を回避するために、ここではデータを直接埋め込みます
    const fileContent = `分野,項目,レベル,スキル,解説
インフラエンジニア,サーバー,初級,基本構築/管理,"サーバーの基本的な構築や管理ができるスキルです。例えば、Linuxサーバーのインストール、基本的な設定（ホスト名、IPアドレス、ファイアウォール）、ユーザー管理、ディスク管理などの作業を行うことができます。"
インフラエンジニア,サーバー,初級,基本監視,"サーバーの基本的な監視ができるスキルです。例えば、CPU使用率、メモリ使用率、ディスク使用率、ネットワークトラフィックなどの基本的なメトリクスを監視し、異常を検知できます。Nagios、Zabbixなどの監視ツールの基本的な設定ができます。"
インフラエンジニア,サーバー,初級,OSセットアップ,"サーバーOSの基本的なセットアップができるスキルです。例えば、Linux/Windowsサーバーのインストール、初期設定、必要なパッケージのインストール、セキュリティアップデートの適用などの作業を行うことができます。"
インフラエンジニア,サーバー,初級,トラブルシューティング（初級）,"サーバーの基本的なトラブルシューティングができるスキルです。例えば、サーバー起動しない、アプリケーションが応答しない、ディスク容量不足などの基本的な問題を特定し、解決するための手順を実行できます。ログファイルの確認、プロセス管理、基本的なネットワーク診断などができます。"
インフラエンジニア,サーバー,中級,高可用性設計,"サーバーの高可用性を考慮した設計ができるスキルです。例えば、クラスタリング、ロードバランシング、フェイルオーバー機能の設計と実装、冗長化構成の設計などを行うことができます。具体的には、HAProxyやKeepalivedなどのツールを使用したロードバランサーの構築、MySQLやPostgreSQLのレプリケーション設定などの作業を行えます。"
インフラエンジニア,サーバー,中級,パフォーマンス最適化,"サーバーのパフォーマンスを最適化できるスキルです。例えば、サーバーのボトルネックを特定し、CPU、メモリ、ディスクI/O、ネットワークなどのリソース使用を最適化する作業を行えます。具体的には、MySQLのクエリ最適化、Apacheやnginxの設定調整、カーネルパラメータの調整などができます。"
インフラエンジニア,サーバー,中級,サーバーリソース管理,"サーバーリソースを効率的に管理できるスキルです。例えば、CPU、メモリ、ディスク、ネットワークなどのリソースを監視し、適切に割り当てる作業を行えます。具体的には、仮想化環境でのリソース割り当て、コンテナ環境でのリソース制限設定、クラウド環境でのオートスケーリング設定などができます。"
インフラエンジニア,サーバー,中級,中級Linux操作（LPIC2相当）,"LPIC2レベル相当のLinux操作ができるスキルです。例えば、シェルスクリプトの作成、cron設定、システム起動プロセスの管理、ネットワーク設定、セキュリティ設定、DNSサーバー設定、Webサーバー設定、メールサーバー設定などの作業を行うことができます。"
インフラエンジニア,サーバー,上級,インフラ全体設計,"企業全体のインフラストラクチャを設計できるスキルです。例えば、サーバー、ネットワーク、ストレージ、セキュリティなどを含む全体アーキテクチャの設計、拠点間接続、クラウドとオンプレミスの連携、災害対策などを考慮した設計を行うことができます。"
インフラエンジニア,サーバー,上級,災害対策/BCP策定,"災害対策とビジネス継続計画（BCP）を策定できるスキルです。例えば、システム障害、自然災害、サイバー攻撃などの緊急事態に備えたバックアップ戦略、復旧手順、代替サイト計画などを策定し、実装することができます。具体的には、地理的に分散したデータセンターの設計、定期的なバックアップと復旧テスト、障害時の切り替え手順の文書化などの作業を行えます。"
インフラエンジニア,サーバー,上級,大規模システム設計,"数万〜数百万ユーザーが利用する大規模システムを設計できるスキルです。例えば、高トラフィックに耐えるスケーラブルなアーキテクチャ、分散システム、マイクロサービスアーキテクチャなどの設計と実装ができます。具体的には、シャーディング、レプリケーション、キャッシュ戦略、非同期処理などの技術を活用した設計を行えます。"
インフラエンジニア,サーバー,上級,オンプレミス/クラウド連携設計,"オンプレミス環境とクラウド環境を連携させる設計ができるスキルです。例えば、ハイブリッドクラウド環境の設計、データ連携、認証連携、ネットワーク接続、セキュリティ対策などを行うことができます。具体的には、VPN/専用線によるクラウド接続、Active Directory連携、データレプリケーション、ディザスタリカバリ設計などの作業を行えます。"
インフラエンジニア,クラウド,初級,AWS/Azure/GCP基本操作,"主要なクラウドプラットフォーム（AWS、Azure、GCP）の基本的な操作ができるスキルです。例えば、コンソール画面からのリソース確認、簡単なリソース作成（仮想マシン、ストレージ、ネットワーク）、基本的な設定変更などの作業を行うことができます。"
インフラエンジニア,クラウド,初級,クラウドリソース作成/削除,"クラウド環境でのリソース作成と削除ができるスキルです。例えば、AWSのEC2インスタンス作成、S3バケット作成、セキュリティグループ設定、Azureの仮想マシン作成、ストレージアカウント作成、GCPのCompute Engineインスタンス作成などの基本的な操作を行うことができます。"
インフラエンジニア,クラウド,初級,基本的なサービス利用,"クラウドの基本的なサービスを利用できるスキルです。例えば、AWSのS3を使ったファイル保存、RDSを使ったデータベース構築、Azureの仮想ネットワーク設定、GCPのCloud Storageを使ったデータ保存など、各クラウドプラットフォームの主要サービスを基本的なレベルで利用できます。"
インフラエンジニア,クラウド,初級,仮想マシン管理,"クラウド環境での仮想マシンを管理できるスキルです。例えば、仮想マシンの作成、起動、停止、再起動、サイズ変更、イメージ作成、スナップショット取得、OSの更新、セキュリティパッチの適用などの基本的な管理作業を行うことができます。"
インフラエンジニア,クラウド,中級,IaC（Terraform等）,"Infrastructure as Code（IaC）ツールを使用してクラウドリソースを管理できるスキルです。例えば、Terraformを使用してAWS/Azure/GCPのリソースをコードで定義し、バージョン管理システムで管理しながら、再現性の高いインフラ構築を行うことができます。変数の使用、モジュール化、状態管理など、IaCの基本的な概念を理解し実装できます。"
インフラエンジニア,クラウド,中級,コンテナ技術（Docker/K8s）,"コンテナ技術を活用できるスキルです。例えば、Dockerを使用したコンテナイメージの作成、コンテナの起動・停止・管理、Dockerfileの作成、Docker Composeによる複数コンテナの管理、Kubernetesを使用したコンテナオーケストレーション（Pod、Service、Deployment等の基本リソース管理）などの作業を行うことができます。"
インフラエンジニア,クラウド,中級,クラウドコスト最適化,"クラウドリソースのコストを最適化できるスキルです。例えば、不要なリソースの特定と削除、リザーブドインスタンス/Savings Planの活用、オートスケーリングの設定、スポットインスタンスの活用、ストレージクラスの最適化、タグ付けによるコスト管理、予算アラートの設定などの作業を行い、クラウド利用コストを効率化できます。"
インフラエンジニア,クラウド,中級,クラウド監視/セキュリティ対策,"クラウド環境の監視とセキュリティ対策ができるスキルです。例えば、CloudWatch/Azure Monitor/Cloud Monitoringなどを使用したリソース監視、アラート設定、ログ分析、IAMポリシー設定、セキュリティグループ/ネットワークセキュリティグループの適切な設定、暗号化の実装、セキュリティベストプラクティスの適用などの作業を行うことができます。"
インフラエンジニア,クラウド,上級,マルチクラウド設計,"複数のクラウドプラットフォームを連携させる設計ができるスキルです。例えば、AWS、Azure、GCPなど複数のクラウドサービスを組み合わせた最適なアーキテクチャ設計、クラウド間のネットワーク接続設計、ID管理の統合、データ連携、障害時のフェイルオーバー設計、一貫したセキュリティポリシーの適用などの作業を行うことができます。"
インフラエンジニア,クラウド,上級,クラウドネイティブアーキテクチャ,"クラウドの特性を最大限に活かしたアーキテクチャを設計できるスキルです。例えば、マイクロサービスアーキテクチャの設計、コンテナオーケストレーション（Kubernetes）の高度な活用、サーバーレスアーキテクチャの設計、イベント駆動型アーキテクチャの実装、自動スケーリング、自己修復機能の実装、継続的デリバリーパイプラインの構築などの作業を行うことができます。"
インフラエンジニア,クラウド,上級,クラウド移行計画,"オンプレミス環境からクラウド環境への移行計画を策定できるスキルです。例えば、現状分析と移行対象の選定、移行戦略（リホスト、リプラットフォーム、リファクタリング等）の決定、段階的移行計画の策定、データ移行計画、ネットワーク設計、セキュリティ設計、コスト見積もり、リスク分析と対策、移行後の運用計画などの作業を行うことができます。"
インフラエンジニア,クラウド,上級,サーバーレスアーキテクチャ,"サーバーレスアーキテクチャを設計・実装できるスキルです。例えば、AWS Lambda/Azure Functions/Cloud Functionsなどのサーバーレス関数の設計と実装、API Gateway/Azure API Management/Cloud Endpointsを使用したAPIの構築、イベント駆動型アーキテクチャの設計、サーバーレスデータベース（DynamoDB/Cosmos DB/Firestore）の活用、サーバーレスアプリケーションのモニタリングとデバッグなどの作業を行うことができます。"
インフラエンジニア,ネットワーク,初級,基本設定（ルーター/スイッチ）,"ネットワーク機器の基本的な設定ができるスキルです。例えば、ルーターやスイッチの初期設定、IPアドレス設定、インターフェース設定、基本的なルーティング設定（静的ルート）、VLANの基本設定などの作業を行うことができます。Cisco IOSやJuniper JUNOSなどの基本的なコマンドを理解し、実行できます。"
インフラエンジニア,ネットワーク,初級,ネットワークトラブルシュート,"ネットワークの基本的なトラブルシューティングができるスキルです。例えば、ping、traceroute、nslookup、ipconfig/ifconfigなどの基本的なコマンドを使用した接続確認、ネットワークケーブルや機器の物理的な確認、ログの確認と基本的な問題の切り分け、単純なネットワーク障害の原因特定と解決などの作業を行うことができます。"
インフラエンジニア,ネットワーク,初級,IPアドレス/サブネット設計,"IPアドレスとサブネットの基本的な設計ができるスキルです。例えば、IPv4アドレスのクラス（A、B、C）の理解、サブネットマスクの計算、CIDR表記の理解、必要なホスト数に基づいたサブネット設計、プライベートIPアドレス範囲の適切な選択、IPアドレス管理表の作成などの作業を行うことができます。"
インフラエンジニア,ネットワーク,初級,基本的なVPN設定,"基本的なVPN（仮想プライベートネットワーク）の設定ができるスキルです。例えば、サイト間VPNの基本設定、リモートアクセスVPNの設定、IPsecやSSL/TLSの基本的な設定、VPNクライアントのインストールと設定、基本的なVPNトラブルシューティングなどの作業を行うことができます。"
インフラエンジニア,ネットワーク,中級,ネットワークセキュリティ設計,"ネットワークセキュリティを考慮した設計ができるスキルです。例えば、ファイアウォールの適切な配置と設定、アクセスコントロールリスト（ACL）の設計と実装、侵入検知/防止システム（IDS/IPS）の導入、DMZ設計、セキュアなリモートアクセス設計、ネットワークセグメンテーション、セキュリティポリシーの実装などの作業を行うことができます。"
インフラエンジニア,ネットワーク,中級,負荷分散設計,"ネットワークの負荷分散設計ができるスキルです。例えば、ロードバランサーの選定と設定、ラウンドロビン/最小コネクション数などの負荷分散アルゴリズムの選択と設定、ヘルスチェックの設定、セッション永続性の設定、複数サイト間の負荷分散設計、障害時のフェイルオーバー設計などの作業を行うことができます。"
インフラエンジニア,ネットワーク,中級,SD-WAN導入/運用,"SD-WAN（Software-Defined Wide Area Network）の導入と運用ができるスキルです。例えば、SD-WAN製品（Cisco SD-WAN、Fortinet SD-WAN、VMware SD-WANなど）の選定、SD-WANコントローラーの設定、エッジデバイスの設定、トラフィックポリシーの設定、アプリケーション認識型ルーティングの設定、複数WAN回線の活用設計、SD-WANの監視と運用などの作業を行うことができます。"
インフラエンジニア,ネットワーク,中級,VLAN/仮想ネットワーク設計,"VLAN（仮想LAN）や仮想ネットワークの設計ができるスキルです。例えば、VLANの設計と実装、VLANトランキングの設定、スパニングツリープロトコル（STP）の設定、仮想環境（VMware、Hyper-V、KVMなど）でのネットワーク設計、仮想スイッチの設定、ネットワークセグメンテーション設計などの作業を行うことができます。"
インフラエンジニア,ネットワーク,上級,大規模ネットワーク設計,"大規模なネットワークアーキテクチャを設計できるスキルです。例えば、数千〜数万ノードを持つエンタープライズネットワークの設計、階層型ネットワークアーキテクチャ（コア、ディストリビューション、アクセス）の設計、BGP/OSPF/EIGRPなどの高度なルーティングプロトコルの設計と実装、冗長性と高可用性を考慮したネットワーク設計、大規模キャンパスネットワーク設計などの作業を行うことができます。"
インフラエンジニア,ネットワーク,上級,グローバルネットワーク設計,"複数国・地域にまたがるグローバルネットワークを設計できるスキルです。例えば、国際専用線/MPLS/SD-WANなどを使用したグローバル接続の設計、地域ごとのインターネット接続（DIA）の設計、グローバルDNS設計、地域間のトラフィックルーティング最適化、地域ごとの法規制を考慮したネットワーク設計、グローバルなディザスタリカバリ設計などの作業を行うことができます。"
インフラエンジニア,ネットワーク,上級,クラウド間ネットワーク連携,"複数のクラウド環境間のネットワーク連携を設計できるスキルです。例えば、AWS Direct Connect、Azure ExpressRoute、Google Cloud Interconnectなどの専用接続の設計と実装、クラウド間VPN設計、Transit Gateway/Virtual Network Peeringなどを使用したクラウド間接続、ハイブリッドクラウドネットワーク設計、マルチクラウド環境でのルーティング設計、クラウド間のセキュアな通信設計などの作業を行うことができます。"
インフラエンジニア,ネットワーク,上級,次世代ネットワークアーキテクチャ,"最新のネットワーク技術を活用したアーキテクチャを設計できるスキルです。例えば、SDN（Software-Defined Networking）アーキテクチャの設計と実装、Intent-Based Networking（IBN）の導入、Network Function Virtualization（NFV）の設計、5G/エッジコンピューティングネットワークの設計、Zero Trust Network Architectureの実装、IPv6移行設計、AIを活用したネットワーク自動化などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,初級,基本コーディング（1〜2言語）,"1〜2つのプログラミング言語で基本的なコーディングができるスキルです。例えば、変数宣言、条件分岐（if-else）、ループ処理（for、while）、関数/メソッド定義、配列/リスト操作、基本的なファイル入出力、簡単なクラス定義（オブジェクト指向言語の場合）などの基本構文を理解し、簡単なプログラムを作成できます。"
開発エンジニア（プログラマー）,プログラミング,初級,基本的なアルゴリズム知識,"基本的なアルゴリズムを理解し実装できるスキルです。例えば、線形探索、二分探索、バブルソート、選択ソート、挿入ソート、再帰処理、スタックとキューの基本操作、単純な文字列処理などの基本的なアルゴリズムを理解し、実際のコードに落とし込むことができます。"
開発エンジニア（プログラマー）,プログラミング,初級,バグ修正/リファクタリング,"既存コードのバグを修正したり、コードを改善したりできるスキルです。例えば、エラーメッセージやログを読み解いてバグの原因を特定する、デバッガーを使用して問題箇所を特定する、冗長なコードの整理、変数名やメソッド名の改善、単純な処理の最適化、コードの可読性向上などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,初級,コードレビュー対応,"コードレビューのフィードバックに対応できるスキルです。例えば、レビュアーからの指摘事項を理解し修正する、コーディング規約に従ってコードを修正する、命名規則の修正、コメントの追加や改善、単純なロジックの修正、テストケースの追加などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,中級,複数言語でのコーディング,"複数のプログラミング言語を使いこなせるスキルです。例えば、Java、Python、JavaScript、C#、Goなど複数の言語の特性を理解し、適材適所で使い分けることができます。各言語の特徴的な機能（Pythonのリスト内包表記、JavaScriptの非同期処理、Javaのストリーム処理など）を活用したコーディングや、言語間の違いを理解した上での適切な実装ができます。"
開発エンジニア（プログラマー）,プログラミング,中級,設計パターンの実装,"ソフトウェア設計パターンを理解し実装できるスキルです。例えば、Singleton、Factory Method、Observer、Strategy、Decorator、Adapterなどの代表的なデザインパターンを理解し、適切な状況で適用できます。また、MVCやMVVMなどのアーキテクチャパターンを理解し、アプリケーション設計に活用することができます。"
開発エンジニア（プログラマー）,プログラミング,中級,パフォーマンス改善,"コードのパフォーマンスを分析し改善できるスキルです。例えば、プロファイリングツールを使用したボトルネックの特定、メモリ使用量の最適化、アルゴリズムの効率化（計算量の削減）、データ構造の最適な選択、キャッシュの活用、非同期処理の適用、SQL クエリの最適化などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,中級,ライブラリ/フレームワーク活用,"様々なライブラリやフレームワークを活用できるスキルです。例えば、Spring Boot（Java）、Django/Flask（Python）、React/Angular/Vue（JavaScript）、.NET Core（C#）などの主要フレームワークの基本的な使い方を理解し、それらを使用したアプリケーション開発ができます。また、ORMやロギング、テスト、HTTPクライアントなどの一般的なライブラリを適切に選択し活用できます。"
開発エンジニア（プログラマー）,プログラミング,上級,技術選定/評価,"プロジェクトに最適な技術を選定・評価できるスキルです。例えば、要件に基づいた言語・フレームワーク・ライブラリの比較と選定、新技術の評価と導入判断、技術的負債の分析と対策提案、オープンソースプロジェクトの評価、ライセンスの確認、セキュリティリスクの評価、パフォーマンス特性の評価などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,上級,開発標準の策定,"開発チームの標準やガイドラインを策定できるスキルです。例えば、コーディング規約の策定、命名規則の定義、ソースコード管理のワークフロー設計、コードレビュープロセスの確立、テスト戦略の策定、CI/CDパイプラインの設計、ドキュメント作成基準の策定、障害対応プロセスの確立などの作業を行うことができます。"
開発エンジニア（プログラマー）,プログラミング,上級,コーディング指導/レビュー,"他の開発者に対してコーディング指導やレビューを行えるスキルです。例えば、コードレビューでの建設的なフィードバック提供、パフォーマンスやセキュリティの観点からの改善提案、アーキテクチャ設計の指導、設計パターンの適切な適用アドバイス、テスト戦略の指導、技術的負債の特定と改善提案などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,初級,HTML/CSS基礎（解析/修正）,"HTML/CSSの基本的な解析と修正ができるスキルです。例えば、既存のHTMLの構造を理解し、要素の追加・修正・削除、CSSセレクタの理解と適用、基本的なスタイル（色、サイズ、余白、配置など）の調整、簡単なレイアウト（Flexbox、Gridの基本）の実装、既存のCSSの問題特定と修正などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,初級,JavaScript基礎（Ajax）,"JavaScriptの基本とAjax通信の基礎を理解しているスキルです。例えば、変数宣言、条件分岐、ループ、関数定義などの基本構文の理解と実装、DOM操作（要素の取得、追加、削除、イベント処理）、fetch APIやXMLHttpRequestを使った基本的な非同期通信（Ajax）の実装、JSONデータの解析と表示、簡単なフォームバリデーションなどの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,初級,基本的なUIコンポーネント実装,"基本的なUIコンポーネントを実装できるスキルです。例えば、ボタン、フォーム要素（入力フィールド、チェックボックス、ラジオボタン、セレクトボックスなど）、モーダル/ダイアログ、タブパネル、アコーディオン、カード、ナビゲーションメニュー、ページネーションなどの基本的なUIコンポーネントをHTML/CSS/JavaScriptを使って実装することができます。"
開発エンジニア（プログラマー）,フロントエンド,初級,レスポンシブデザイン基礎,"レスポンシブデザインの基本を理解し実装できるスキルです。例えば、メディアクエリの使用、ビューポートの設定、相対的な単位（%、em、rem、vw/vh）の適切な使用、フレキシブルなグリッドレイアウトの実装、画像のレスポンシブ対応（max-width: 100%など）、モバイルファーストアプローチの理解と適用などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,中級,React/Vue/Angular等の活用,"モダンなJavaScriptフレームワーク/ライブラリを活用できるスキルです。例えば、React、Vue、Angularなどのコンポーネントベースの開発、コンポーネントのライフサイクルの理解と活用、プロパティとステートの適切な管理、イベント処理、条件付きレンダリング、リストレンダリング、フォーム処理、コンポーネント間の通信、ルーティングの実装などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,中級,状態管理（Redux等）,"フロントエンドの状態管理ライブラリを活用できるスキルです。例えば、Redux、Vuex、NgRx、MobX、Recoilなどの状態管理ライブラリの基本概念（ストア、アクション、リデューサー/ミューテーション、セレクターなど）の理解と実装、非同期アクションの処理（Redux-Thunk、Redux-Saga、Effectsなど）、開発者ツールを使用したデバッグ、パフォーマンスを考慮した状態設計などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,中級,SPA開発,"シングルページアプリケーション（SPA）を開発できるスキルです。例えば、クライアントサイドルーティングの実装、ページ遷移とアニメーション、非同期データ取得と表示、ローディング状態の管理、エラーハンドリング、フォーム処理と検証、認証/認可の実装、ローカルストレージ/セッションストレージの活用、SPAのSEO対策などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,中級,UIパフォーマンス最適化,"UIのパフォーマンスを最適化できるスキルです。例えば、レンダリングパフォーマンスの分析と改善、不要な再レンダリングの防止、メモ化（React.memo、useMemo、useCallbackなど）の適切な使用、仮想スクロール/ウィンドウイングの実装、画像の最適化（遅延読み込み、適切なフォーマットと圧縮）、Webフォントの最適化、CSSアニメーションのパフォーマンス改善などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,上級,フロントエンドアーキテクチャ設計,"フロントエンドのアーキテクチャを設計できるスキルです。例えば、コンポーネント設計（アトミックデザイン、BEMなど）、状態管理戦略の策定、データフローの設計、APIとの通信層の設計、エラーハンドリング戦略、認証/認可の設計、国際化/地域化の設計、テスト戦略（単体テスト、統合テスト、E2Eテスト）の策定、パフォーマンス戦略の策定などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,上級,マイクロフロントエンド設計,"マイクロフロントエンドアーキテクチャを設計・実装できるスキルです。例えば、マイクロフロントエンドの分割戦略の策定、各マイクロフロントエンド間の通信設計、共有ライブラリ/コンポーネントの設計、ルーティング統合、スタイルの一貫性確保、独立したデプロイメントパイプラインの設計、チーム間の協業モデルの確立などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,上級,パフォーマンス/アクセシビリティ最適化,"高度なパフォーマンスとアクセシビリティの最適化ができるスキルです。例えば、Webパフォーマンスの主要指標（LCP、FID、CLS、TTI）の最適化、コード分割とレイジーローディングの実装、サーバーサイドレンダリング/静的サイト生成の適用、Service Workerとキャッシュ戦略の実装、WAI-ARIAの適切な使用、キーボードナビゲーションの実装、スクリーンリーダー対応、コントラスト比の確保、フォーカス管理などの作業を行うことができます。"
開発エンジニア（プログラマー）,フロントエンド,上級,大規模フロントエンド開発管理,"大規模なフロントエンド開発プロジェクトを管理できるスキルです。例えば、モノレポ管理（Lerna、Nx、Turborepoなど）、コンポーネントライブラリの設計と管理、デザインシステムの実装と運用、コーディング規約とリンター/フォーマッターの設定、CI/CDパイプラインの設計、フロントエンドのセキュリティ対策、パフォーマンスモニタリングの導入、技術的負債の管理などの作業を行うことができます。"
開発エンジニア（プログラマー）,バックエンド,初級,基本的なAPI実装
開発エンジニア（プログラマー）,バックエンド,初級,CRUD操作
開発エンジニア（プログラマー）,バックエンド,初級,基本的なデータ処理
開発エンジニア（プログラマー）,バックエンド,初級,シンプルなバックエンド構築
開発エンジニア（プログラマー）,バックエンド,中級,RESTful API設計
開発エンジニア（プログラマー）,バックエンド,中級,セキュアなバックエンド設計
開発エンジニア（プログラマー）,バックエンド,中級,キャッシュ戦略
開発エンジニア（プログラマー）,バックエンド,中級,マイクロサービス基礎
開発エンジニア（プログラマー）,バックエンド,上級,大規模バックエンドアーキテクチャ
開発エンジニア（プログラマー）,バックエンド,上級,マイクロサービス設計
開発エンジニア（プログラマー）,バックエンド,上級,負荷分散/スケーラビリティ設計
開発エンジニア（プログラマー）,バックエンド,上級,API設計標準化
開発エンジニア（SE）,設計,初級,詳細設計書作成
開発エンジニア（SE）,設計,初級,テスト仕様書作成（〜結合）
開発エンジニア（SE）,設計,初級,要件定義支援
開発エンジニア（SE）,設計,中級,基本設計書作成
開発エンジニア（SE）,設計,中級,DB設計/データモデリング
開発エンジニア（SE）,設計,中級,統合テスト設計
開発エンジニア（SE）,設計,中級,要件定義レビュー主導
開発エンジニア（SE）,設計,上級,システム全体設計
開発エンジニア（SE）,設計,上級,大規模システム設計
開発エンジニア（SE）,設計,上級,全体最適化設計
開発エンジニア（SE）,設計,上級,要件定義からの上流工程主導
開発エンジニア（SE）,データベース,初級,基本CRUD操作
開発エンジニア（SE）,データベース,初級,簡易クエリ作成
開発エンジニア（SE）,データベース,初級,テーブル設計基礎
開発エンジニア（SE）,データベース,初級,基本的なSQL最適化
開発エンジニア（SE）,データベース,中級,DB設計/正規化
開発エンジニア（SE）,データベース,中級,パフォーマンスチューニング
開発エンジニア（SE）,データベース,中級,NoSQL基礎
開発エンジニア（SE）,データベース,中級,ETL処理設計
開発エンジニア（SE）,データベース,上級,大規模DB設計
開発エンジニア（SE）,データベース,上級,分散DB設計
開発エンジニア（SE）,データベース,上級,データウェアハウス設計
開発エンジニア（SE）,データベース,上級,高度なリレーショナル/NoSQL構成
開発エンジニア（SE）,開発プロセス,初級,基本テスト実施
開発エンジニア（SE）,開発プロセス,初級,バージョン管理基礎
開発エンジニア（SE）,開発プロセス,初級,ウォーターフォール開発参加
開発エンジニア（SE）,開発プロセス,初級,アジャイル開発参加
開発エンジニア（SE）,開発プロセス,中級,CI/CD構築
開発エンジニア（SE）,開発プロセス,中級,テスト自動化
開発エンジニア（SE）,開発プロセス,中級,アジャイル開発推進
開発エンジニア（SE）,開発プロセス,中級,品質管理プロセス整備
開発エンジニア（SE）,開発プロセス,上級,開発プロセス改善
開発エンジニア（SE）,開発プロセス,上級,DevOps文化構築
開発エンジニア（SE）,開発プロセス,上級,品質保証体制整備
開発エンジニア（SE）,開発プロセス,上級,アジャイルスクラムマスター
開発エンジニア（SE）,セキュリティ,初級,基本的なセキュリティ対策
開発エンジニア（SE）,セキュリティ,初級,脆弱性対応
開発エンジニア（SE）,セキュリティ,初級,認証/認可の基本実装
開発エンジニア（SE）,セキュリティ,初級,セキュアコーディング基礎
開発エンジニア（SE）,セキュリティ,中級,セキュリティ設計
開発エンジニア（SE）,セキュリティ,中級,脆弱性診断/対策
開発エンジニア（SE）,セキュリティ,中級,OAuth/OIDC実装
開発エンジニア（SE）,セキュリティ,中級,セキュリティレビュー実施
開発エンジニア（SE）,セキュリティ,上級,セキュリティ基盤設計
開発エンジニア（SE）,セキュリティ,上級,セキュリティポリシー策定
開発エンジニア（SE）,セキュリティ,上級,セキュリティインシデント対応
開発エンジニア（SE）,セキュリティ,上級,ゼロトラスト設計
マネジメント,マネジメント,初級,小規模チーム管理（〜5人）
マネジメント,マネジメント,初級,タスク配分/進捗管理
マネジメント,マネジメント,初級,チーム内調整
マネジメント,マネジメント,初級,顧客折衝基礎
マネジメント,マネジメント,初級,小規模予算管理
マネジメント,マネジメント,中級,中規模プロジェクト管理
マネジメント,マネジメント,中級,リスク管理
マネジメント,マネジメント,中級,ステークホルダー管理
マネジメント,マネジメント,中級,顧客折衝
マネジメント,マネジメント,中級,予算/工数管理
マネジメント,マネジメント,上級,複数プロジェクト統括
マネジメント,マネジメント,上級,プロジェクト間調整
マネジメント,マネジメント,上級,事業戦略策定
マネジメント,マネジメント,上級,組織マネジメント
マネジメント,マネジメント,上級,経営層とのコミュニケーション`;

    // CSVを手動でパースする（csv-parseパッケージの代わりに）
    const lines = fileContent.split("\n");
    const headers = lines[0].split(",");

    const records = [];
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line) {
        const values = line.split(",");
        const record: any = {};

        headers.forEach((header, index) => {
          record[header] = values[index];
        });

        records.push(record);
      }
    }

    // 各レコードにIDを付与する
    return records.map((record: any, index: number) => ({
      ...record,
      id: index + 1,
    }));
  } catch (error) {
    console.error("CSVファイルの読み込みに失敗しました:", error);
    return [];
  }
};

/**
 * スキルデータから一意のカテゴリー（分野と項目の組み合わせ）を抽出する関数
 * @param skills スキルデータの配列
 * @returns カテゴリーの配列
 */
export const extractCategories = (skills: Skill[]) => {
  const categories = new Map<string, Set<string>>();

  skills.forEach((skill) => {
    if (!categories.has(skill.分野)) {
      categories.set(skill.分野, new Set());
    }
    categories.get(skill.分野)?.add(skill.項目);
  });

  return Array.from(categories).map(([category, items]) => ({
    category,
    items: Array.from(items),
  }));
};

/**
 * スキルデータを分野ごとにグループ化する関数
 * @param skills スキルデータの配列
 * @returns 分野ごとにグループ化されたスキルデータ
 */
export const groupSkillsByField = (skills: Skill[]) => {
  const grouped = new Map<string, Skill[]>();

  skills.forEach((skill) => {
    if (!grouped.has(skill.分野)) {
      grouped.set(skill.分野, []);
    }
    grouped.get(skill.分野)?.push(skill);
  });

  return grouped;
};

/**
 * スキルデータを分野と項目でグループ化する関数
 * @param skills スキルデータの配列
 * @returns 分野と項目でグループ化されたスキルデータ
 */
export const groupSkillsByCategoryAndItem = (skills: Skill[]) => {
  const grouped = new Map<string, Map<string, Skill[]>>();

  skills.forEach((skill) => {
    if (!grouped.has(skill.分野)) {
      grouped.set(skill.分野, new Map());
    }

    const categoryMap = grouped.get(skill.分野);
    if (!categoryMap?.has(skill.項目)) {
      categoryMap?.set(skill.項目, []);
    }

    categoryMap?.get(skill.項目)?.push(skill);
  });

  return grouped;
};
