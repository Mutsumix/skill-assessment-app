import React, { useState, useEffect } from "react";
import { View, StyleSheet, ScrollView, Image, Text } from "react-native";
import Typography from "../components/Typography";
import Button from "../components/Button";
import Card from "../components/Card";
import theme from "../styles/theme";
import { useSkillContext } from "../contexts/SkillContext";

interface InstructionScreenProps {
  onStart: () => void;
}

const InstructionScreen: React.FC<InstructionScreenProps> = ({ onStart }) => {
  const [currentPage, setCurrentPage] = useState(0);
  const { hasSavedProgress, loadSavedProgress, isPartialAssessment, selectedDomain } = useSkillContext();

  // Ë™¨Êòé„Éö„Éº„Ç∏„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºàÈÉ®ÂàÜË©ï‰æ°ÊôÇ„ÅØ‰∏ÄÈÉ®Â§âÊõ¥Ôºâ
  const pages = isPartialAssessment ? [
    {
      title: `${selectedDomain} Ë©ï‰æ°„ÅÆÊñπÊ≥ï`,
      content:
        `${selectedDomain}ÂàÜÈáé„ÅÆ„Çπ„Ç≠„É´„É¨„Éô„É´„ÇíË©ï‰æ°„Åó„Åæ„Åô„ÄÇË°®Á§∫„Åï„Çå„Çã„Çπ„Ç≠„É´È†ÖÁõÆ„Å´ÂØæ„Åó„Å¶„ÄÅ„Éú„Çø„É≥„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
      image: "üìù‚ú®",
    },
    {
      title: "ÂõûÁ≠îÊñπÊ≥ï",
      content:
        "„Äå„ÅØ„ÅÑ„ÄçÔºö„Çπ„Ç≠„É´„ÅÇ„Çä\n„Äå„ÅÑ„ÅÑ„Åà„ÄçÔºö„Çπ„Ç≠„É´„Å™„Åó\n\nÂâçÂõû„ÅÆÂõûÁ≠î„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅÁ∑ëËâ≤„ÅÆ„Éú„Çø„É≥„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ„Ç´„Éº„Éâ„ÅÆÂè≥‰∏ä„Å´„ÄåÂâçÂõûÔºö„ÅØ„ÅÑ/„ÅÑ„ÅÑ„Åà„Äç„ÇÇË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ",
      image: "‚≠ïÔ∏è‚ùå",
    },
    {
      title: "ÁµêÊûú„ÅÆÁ¢∫Ë™ç",
      content:
        `Ë©ï‰æ°ÂÆå‰∫ÜÂæå„ÄÅ${selectedDomain}ÂàÜÈáé„ÅÆ„Çπ„Ç≠„É´ÁøíÂæóÁä∂Ê≥Å„ÅåÊ£í„Ç∞„É©„Éï„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ„Å™„Åä„ÄÅ„Åì„ÅÆÁµêÊûú„ÅØÂ±•Ê≠¥„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åõ„Çì„ÄÇ`,
      image: "üìäü¶∏‚Äç‚ôÇÔ∏è",
    },
  ] : [
    {
      title: "„Çπ„Ç≠„É´Ë©ï‰æ°„ÅÆÊñπÊ≥ï",
      content:
        "„Åì„ÅÆ„Ç¢„Éó„É™„Åß„ÅØ„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≠„É´„É¨„Éô„É´„ÇíË©ï‰æ°„Åó„Åæ„Åô„ÄÇË°®Á§∫„Åï„Çå„Çã„Çπ„Ç≠„É´È†ÖÁõÆ„Å´ÂØæ„Åó„Å¶„ÄÅ„Éú„Çø„É≥„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      image: "üìù‚ú®",
    },
    {
      title: "ÂõûÁ≠îÊñπÊ≥ï",
      content:
        "„Äå„ÅØ„ÅÑ„ÄçÔºö„Çπ„Ç≠„É´„ÅÇ„Çä\n„Äå„ÅÑ„ÅÑ„Åà„ÄçÔºö„Çπ„Ç≠„É´„Å™„Åó\n\nÂâçÂõû„ÅÆÂõûÁ≠î„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅÁ∑ëËâ≤„ÅÆ„Éú„Çø„É≥„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ„Ç´„Éº„Éâ„ÅÆÂè≥‰∏ä„Å´„ÄåÂâçÂõûÔºö„ÅØ„ÅÑ/„ÅÑ„ÅÑ„Åà„Äç„ÇÇË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ",
      image: "‚≠ïÔ∏è‚ùå",
    },
    {
      title: "‰ºëÊÜ©„Çø„Ç§„É†",
      content:
        "ÂàÜÈáé„Åî„Å®„Å´‰ºëÊÜ©„Ç´„Éº„Éâ„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ‰∏ÄÊÅØ„Å§„ÅÑ„Å¶„Åã„ÇâÊ¨°„ÅÆÂàÜÈáé„Å´ÈÄ≤„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ",
      image: "‚òïÔ∏èüòå",
    },
    {
      title: "ÁµêÊûú„ÅÆÁ¢∫Ë™ç",
      content:
        "ÂÖ®„Å¶„ÅÆÂõûÁ≠î„ÅåÂÆå‰∫Ü„Åô„Çã„Å®„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≠„É´„É¨„Éô„É´„Åå„É¨„Éº„ÉÄ„Éº„ÉÅ„É£„Éº„Éà„Å®‰∏ÄË¶ß„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅ„ÅÇ„Å™„Åü„ÅÆÂº∑„Åø„Å®Âº±„Åø„ÇíË¶ñË¶öÁöÑ„Å´Á¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ",
      image: "üìäü¶∏‚Äç‚ôÇÔ∏è",
    },
  ];

  // ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏
  const currentPageData = pages[currentPage];

  // Ê¨°„ÅÆ„Éö„Éº„Ç∏„Å´ÈÄ≤„ÇÄ
  const nextPage = () => {
    if (currentPage < pages.length - 1) {
      setCurrentPage(currentPage + 1);
    } else {
      onStart();
    }
  };

  // Ââç„ÅÆ„Éö„Éº„Ç∏„Å´Êàª„Çã
  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  // ÈÄî‰∏≠„Åã„ÇâÂÜçÈñã
  const handleResume = async () => {
    const loaded = await loadSavedProgress();
    if (loaded) {
      onStart();
    }
  };

  return (
    <View style={styles.container}>
      <Card variant="elevated" style={styles.card}>
        <Typography variant="h3" align="center" style={styles.title}>
          {currentPageData.title}
        </Typography>

        <ScrollView style={styles.contentContainer}>
          <View style={styles.imagePlaceholder}>
            <Text style={styles.emojiImage}>
              {currentPageData.image}
            </Text>
          </View>

          <View style={styles.contentTextContainer}>
            {currentPageData.content.split('\n').map((line, index) => (
              <Text key={index} style={styles.contentText}>
                {line}
              </Text>
            ))}
          </View>
        </ScrollView>

        <View style={styles.pagination}>
          {Array.from({ length: pages.length }).map((_, index) => (
            <View
              key={index}
              style={[
                styles.paginationDot,
                currentPage === index && styles.paginationDotActive,
              ]}
            />
          ))}
        </View>

        <View style={styles.buttonContainer}>
          {currentPage > 0 && (
            <Button
              title="Êàª„Çã"
              onPress={prevPage}
              variant="outline"
              style={styles.button}
            />
          )}
          <Button
            title={currentPage === pages.length - 1 ? "Âßã„ÇÅ„Çã" : "Ê¨°„Å∏"}
            onPress={nextPage}
            variant="primary"
            style={styles.button}
          />
        </View>

        {/* ‰øùÂ≠ò„Åï„Çå„ÅüÈÄ≤Êçó„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÈÄî‰∏≠„Åã„ÇâÂÜçÈñã„Éú„Çø„É≥„ÇíË°®Á§∫ */}
        {hasSavedProgress && currentPage === pages.length - 1 && (
          <View style={styles.resumeContainer}>
            <Typography variant="caption" style={styles.resumeText}>
              ‰øùÂ≠ò„Åï„Çå„ÅüÈÄ≤Êçó„Åå„ÅÇ„Çä„Åæ„Åô
            </Typography>
            <Button
              title="ÈÄî‰∏≠„Åã„ÇâÂÜçÈñã"
              onPress={handleResume}
              variant="secondary"
              style={styles.resumeButton}
            />
          </View>
        )}
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.common.background,
    justifyContent: "center",
    alignItems: "center",
    padding: theme.spacing.lg,
  },
  card: {
    width: "100%",
    maxWidth: 500,
    padding: theme.spacing.lg,
  },
  title: {
    marginBottom: theme.spacing.lg,
  },
  contentContainer: {
    maxHeight: 400,
  },
  image: {
    width: "100%",
    height: 200,
    marginBottom: theme.spacing.md,
  },
  imagePlaceholder: {
    width: "100%",
    height: 200,
    backgroundColor: theme.colors.gray[200],
    borderRadius: theme.borderRadius.md,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: theme.spacing.md,
  },
  content: {
    marginBottom: theme.spacing.lg,
    lineHeight: theme.typography.lineHeight.loose,
  },
  contentTextContainer: {
    marginBottom: theme.spacing.lg,
  },
  emojiImage: {
    fontSize: 64,
    textAlign: "center",
    marginBottom: theme.spacing.md,
  },
  contentText: {
    fontSize: 16,
    lineHeight: 24,
    color: theme.colors.gray[800],
    marginBottom: 8,
    fontFamily: theme.typography.fontFamily.base,
  },
  pagination: {
    flexDirection: "row",
    justifyContent: "center",
    marginBottom: theme.spacing.md,
  },
  paginationDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: theme.colors.gray[300],
    marginHorizontal: 4,
  },
  paginationDotActive: {
    backgroundColor: theme.colors.primary.main,
    width: 16,
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  button: {
    flex: 1,
    marginHorizontal: theme.spacing.xs,
  },
  resumeContainer: {
    marginTop: theme.spacing.md,
    alignItems: "center",
  },
  resumeText: {
    marginBottom: theme.spacing.xs,
    color: theme.colors.primary.main,
  },
  resumeButton: {
    width: "100%",
  },
});

export default InstructionScreen;
